{"version":3,"sources":["loadGlobe.gif","Clock.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","_this2","update","setInterval","setState","clearInterval","react_default","a","createElement","className","moment","tz","format","React","Component","App","onClick","isLoading","fetch","method","headers","Content-Type","body","JSON","stringify","city","then","resp","json","data","length","chosenCity","options","name","location","lat","lng","lon","timeZone","timeStamp","onTextChange","event","target","value","onChosenCity","filterArray","filter","item","onKey","key","cityAndState","map","i","src_Clock_0","style","background","src","require","placeholder","type","onKeyPress","onChange","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.1e3f380d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadGlobe.5c93a7d9.gif\";","import React from 'react'\r\nimport moment from 'moment-timezone'\r\nimport './Clock.css'\r\n\r\n\r\nclass Clock extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { time: new Date() }; // initialise the state\r\n    }\r\n\r\n    componentDidMount() { // create the interval once component is mounted\r\n        this.update = setInterval(() => {\r\n            this.setState({ time: new Date() });\r\n        }, 1 * 1000); // every 1 seconds\r\n    }\r\n\r\n    componentWillUnmount() { // delete the interval just before component is removed\r\n        clearInterval(this.update);\r\n    }\r\n\r\n    render() {\r\n        const { time } = this.state; // retrieve the time from state\r\n\r\n        return (<div className='container'>\r\n            \r\n            <h2>\r\n                {'It is '}\r\n                {moment(time).tz(this.props.time).format('LTS')}\r\n                {\" in\"}\r\n            </h2>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Clock","\nimport React from 'react';\nimport './App.css';\nimport Clock from './Clock'\n\n//------------------------------------------------THIS.STATE-----------------------------------------------------\n\nclass App extends React.Component {\n    constructor() {\n      super()\n      this.state = {\n          isLoading: false,\n          city: '',\n          chosenCity: 'Cincinnati, OH',\n          timeStamp: '',\n          location: {\n            lat: \"42.349998\",\n            lng: \"-83.059998\"\n          },\n          timeZone: 'America/New_York',\n          options: [\n            {\n              name: 'City, State'\n            }\n          ]\n        }\n    }\n  \n//-------------------------------------------------MAIN FUNCTION-------------------------------------------------\n  onClick = () => {\n    this.setState({isLoading: true})\n      fetch(\"http://localhost:3030/cities\", \n      {\n        method: 'post',\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          city: this.state.city\n        })\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.length === 0) {\n            this.setState({\n              chosenCity: 'No such city...',\n              isLoading: false\n            })\n          }\n          else {\n            this.setState({\n                  options: data,\n                  chosenCity: data[0].name,\n                  location: {\n                    lat: data[0].lat,\n                    lng: data[0].lon\n                  },\n                  timeZone: data[0].tz,\n                  timeStamp: new Date(),\n                  isLoading: false\n            })\n          }\n        })\n  }\n\n//------------------------------------------------EVENT FUNCTIONS------------------------------------------------\n\n  /*onClick2 = () => {    <-----------------   click function test \n    console.log(\"p\")\n  }*/\n\n  onTextChange = (event) => {\n    this.setState({city: event.target.value})\n  }\n\n  onChosenCity = (event) => {\n    this.setState({\n      chosenCity: event.target.value\n    })\n    let filterArray = this.state.options.filter((item) => {\n      if (item.name === event.target.value) {\n        return item;\n      }\n    })\n      this.setState({\n        location: {\n          lat: filterArray[0].lat,\n          lng: filterArray[0].lon\n        },\n        timeZone: filterArray[0].tz\n      })\n  } \n\n  onKey = (event) => {\n    if (event.key === \"Enter\") {\n      this.onClick()\n    }\n  }\n\n//----------------------------------------------RENDER FUNCTION-------------------------------------------------- \n\n  render() {\n    let cityAndState = this.state.options.map((item, i) => {\n       return <option key={i}>{item.name}</option>\n    })\n    return (\n      \n      <div className=\"App\">\n      <Clock className='timer' time={this.state.timeZone}/>\n      {this.state.isLoading ? \n        <img style={{background: 'transparent'}} src={require('./loadGlobe.gif')} /> :\n        <h1 className=\"city\">{this.state.chosenCity}</h1>\n      } \n        <input className='textBox' placeholder='enter any city..'type=\"text\" onKeyPress={this.onKey}onChange={this.onTextChange}/>\n        <input className='button' type=\"button\" value=\"Get Time\" onClick={() => this.onClick(this.state.city)}/>\n        <select className=\"dropDown\" onChange={this.onChosenCity}>\n            {cityAndState}\n        </select>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//---------------------------------------------------NOTES---------------------------------------------------------------\n\n//make search bar give options when user is typing\n\n//make a loading circle when loading city\n\n//read through tutorial OR find another lat/lon-to-map API \n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}